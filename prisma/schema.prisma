generator client {
  provider = "prisma-client-js"
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model flyway_schema_history {
  installed_rank Int      @id
  version        String?
  description    String
  type           String
  script         String
  checksum       Int?
  installed_by   String
  installed_on   DateTime @default(now())
  execution_time Int
  success        Boolean

  @@index([success], name: "flyway_schema_history_s_idx")
}

model Member {
  id               Int               @id @default(autoincrement())
  givenName        String            @map("given_name")
  familyName       String            @map("family_name")
  gender           String
  registrationDate DateTime          @map("registration_date")
  ownerUserId      Int               @map("owner_user_id")
  owner            User              @relation(fields: [ownerUserId], references: [id])
  attributes       MemberAttribute[]

  @@index([ownerUserId], name: "idx_member_owner_user_id")
  @@map("member")
}

model News {
  id          Int             @id @default(autoincrement())
  createdDate DateTime        @map("created_date")
  publishDate DateTime        @map("publish_date")
  title       String
  body        String
  attributes  NewsAttribute[]
  comments    NewsComment[]

  @@map("news")
}

model NewsAttribute {
  id     Int     @id @default(autoincrement())
  newsId Int     @map("news_id")
  name   String
  value  String?
  news   News    @relation(fields: [newsId], references: [id])

  @@index([newsId], name: "idx_news_attribute_news_id")
  @@map("news_attribute")
}

model NewsComment {
  id     Int     @id @default(autoincrement())
  newsId Int     @map("news_id")
  author String?
  body   String
  news   News    @relation(fields: [newsId], references: [id])

  @@index([newsId], name: "idx_news_comment_news_id")
  @@map("news_comment")
}

model User {
  id         Int      @id @default(autoincrement())
  externalId String?  @unique @map("external_id")
  email      String   @unique
  givenName  String?  @map("given_name")
  familyName String?  @map("family_name")
  roles      Json
  members    Member[]

  @@map("user")
}

model AttributeDefinition {
  id               Int               @id @default(autoincrement())
  key              String            @unique
  type             AttributeType
  encrypt          Boolean?          @default(false)
  choices          Json?
  memberAttributes MemberAttribute[] @relation("definitionTomemberAttributes")

  @@map("attribute_definition")
}

model MemberAttribute {
  memberId    Int                 @map("member_id")
  attributeId Int                 @map("attribute_id")
  createdDate DateTime            @map("created_date")
  updatedDate DateTime            @map("updated_date")
  value       Json?
  definition  AttributeDefinition @relation("definitionTomemberAttributes", fields: [attributeId], references: [id])
  member      Member              @relation(fields: [memberId], references: [id])

  @@id([memberId, attributeId])
  @@index([attributeId], name: "idx_member_attribute_attribute_id")
  @@index([memberId], name: "idx_member_attribute_member_id")
  @@map("member_attribute")
}

model MemberCategory {
  id                Int     @id @default(autoincrement())
  key               String  @unique
  registration_code String?

  @@map("member_category")
}

enum AttributeType {
  String
  Number
  Boolean
  Date
  Time
  Timestamp
  List

   @@map("attribute_type")
}

generator client {
  provider = "prisma-client-js"
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model flyway_schema_history {
  installed_rank Int      @id
  version        String?
  description    String
  type           String
  script         String
  checksum       Int?
  installed_by   String
  installed_on   DateTime @default(now())
  execution_time Int
  success        Boolean

  @@index([success], name: "flyway_schema_history_s_idx")
}

model Member {
  id                 Int                  @id @default(autoincrement())
  type               String
  registrationDate   DateTime             @map("registration_date")
  ownerUserId        String               @map("owner_user_id")
  attributes         MemberAttribute[]
  relatedMembers     MemberRelationship[] @relation("MemberToMemberRelationshipMemberId")
  membersRelatedToMe MemberRelationship[] @relation("MemberToMemberRelationshipRelatedMemberId")
  subscription       MemberSubscription[]

  @@index([ownerUserId], name: "idx_member_owner_user_id")
  @@map("member")
}

model News {
  id          Int             @id @default(autoincrement())
  createdDate DateTime        @map("created_date")
  publishDate DateTime        @map("publish_date")
  title       String
  body        String
  attributes  NewsAttribute[]
  comments    NewsComment[]

  @@map("news")
}

model NewsAttribute {
  id     Int     @id @default(autoincrement())
  newsId Int     @map("news_id")
  name   String
  value  String?
  news   News    @relation(fields: [newsId], references: [id])

  @@index([newsId], name: "idx_news_attribute_news_id")
  @@map("news_attribute")
}

model NewsComment {
  id     Int     @id @default(autoincrement())
  newsId Int     @map("news_id")
  author String?
  body   String
  news   News    @relation(fields: [newsId], references: [id])

  @@index([newsId], name: "idx_news_comment_news_id")
  @@map("news_comment")
}

model AttributeDefinition {
  id                         Int                          @id @default(autoincrement())
  key                        String                       @unique
  type                       AttributeType
  choices                    Json?
  memberAttributes           MemberAttribute[]
  memberFormSectionAttribute MemberFormSectionAttribute[]

  @@map("attribute_definition")
}

model MemberAttribute {
  memberId    Int                 @map("member_id")
  attributeId Int                 @map("attribute_id")
  createdDate DateTime            @map("created_date")
  updatedDate DateTime            @map("updated_date")
  value       Json?
  definition  AttributeDefinition @relation(fields: [attributeId], references: [id])
  member      Member              @relation(fields: [memberId], references: [id])

  @@id([memberId, attributeId])
  @@index([attributeId], name: "idx_member_attribute_attribute_id")
  @@index([memberId], name: "idx_member_attribute_member_id")
  @@map("member_attribute")
}

model MemberCategory {
  id               Int                         @id @default(autoincrement())
  key              String                      @unique
  registrationCode String?                     @map("registration_code")
  form             MemberCategoryFormSection[]
  pricelistItem    PricelistItem[]             @relation("member_categoryTopricelist_item")

  @@map("member_category")
}

model MemberCategoryFormSection {
  memberCategoryId     Int               @map("member_category_id")
  memberFormSectionId  Int               @map("member_form_section_id")
  sortOrder            Int               @map("sort_order")
  show_on_registration Boolean
  category             MemberCategory    @relation(fields: [memberCategoryId], references: [id])
  section              MemberFormSection @relation(fields: [memberFormSectionId], references: [id])

  @@id([memberCategoryId, memberFormSectionId])
  @@map("member_category_form_section")
}

model MemberFormSection {
  id        Int                          @id @default(autoincrement())
  key       String                       @unique
  form      MemberCategoryFormSection[]
  attribute MemberFormSectionAttribute[]

  @@map("member_form_section")
}

model MemberFormSectionAttribute {
  memberFormSectionId   Int                 @map("member_form_section_id")
  attributeDefinitionId Int                 @map("attribute_definition_id")
  sortOrder             Int                 @map("sort_order")
  mandatory             Boolean             @default(false)
  definition            AttributeDefinition @relation(fields: [attributeDefinitionId], references: [id])
  section               MemberFormSection   @relation(fields: [memberFormSectionId], references: [id])

  @@id([memberFormSectionId, attributeDefinitionId])
  @@map("member_form_section_attribute")
}

model PriceList {
  pricelistItemId Int           @map("pricelist_item_id")
  dateFrom        DateTime      @map("date_from")
  dateTo          DateTime      @map("date_to")
  price           Float
  pricelistItem   PricelistItem @relation("PricelistToPricelistItem", fields: [pricelistItemId], references: [id])

  @@id([pricelistItemId, dateFrom, dateTo])
  @@index([dateFrom, dateTo], name: "idx_pricelist_item_date_from_date_to")
  @@map("pricelist")
}

model MemberRelationship {
  memberId         Int              @map("member_id")
  relatedMemberId  Int              @map("related_member_id")
  relationshipType RelationshipType @map("relationship_type")
  member           Member           @relation("MemberToMemberRelationshipMemberId", fields: [memberId], references: [id])
  relatedMember    Member           @relation("MemberToMemberRelationshipRelatedMemberId", fields: [relatedMemberId], references: [id])

  @@id([memberId, relatedMemberId, relationshipType])
  @@index([memberId], name: "idx_member_relationship_member_id")
  @@index([relatedMemberId], name: "idx_related_member_relationship_member_id")
  @@map("member_relationship")
}

model PricelistItem {
  id                 Int                  @id @default(autoincrement())
  categoryId         Int                  @map("category_id")
  minAge             Int                  @map("min_age")
  maxAge             Int?                 @map("max_age")
  description        String
  includesMatchFees  Boolean?             @map("includes_match_fees")
  memberCategory     MemberCategory       @relation("member_categoryTopricelist_item", fields: [categoryId], references: [id])
  memberSubscription MemberSubscription[] @relation("SemberSubscriptionToPricelistItem")
  pricelist          PriceList[]          @relation("PricelistToPricelistItem")

  @@index([categoryId], name: "idx_pricelist_item_category_id")
  @@map("pricelist_item")
}

model MemberSubscription {
  memberId        Int           @map("member_id")
  year            Int
  pricelistItemId Int           @map("pricelist_item_id")
  price           Float
  /// The value of this field is generated by the database as: `CURRENT_DATE`.
  addedDate       DateTime      @default(dbgenerated()) @map("added_date")
  member          Member        @relation(fields: [memberId], references: [id])
  pricelistItem   PricelistItem @relation("SemberSubscriptionToPricelistItem", fields: [pricelistItemId], references: [id])

  @@id([memberId, year])
  @@map("member_subscription")
}

enum AttributeType {
  String
  Number
  Boolean
  Date
  Time
  Timestamp
  List
  Option
  Email

   @@map("attribute_type")
}

enum RelationshipType {
  owner
  parent
  emergency

   @@map("relationship_type")
}
